<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hozshan</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-29T15:36:21.638Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hozshan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【面试笔记】Python，Django</title>
    <link href="http://yoursite.com/2019/05/29/%E3%80%90%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%E3%80%91Python%EF%BC%8CDjango/"/>
    <id>http://yoursite.com/2019/05/29/【面试笔记】Python，Django/</id>
    <published>2019-05-29T13:25:22.000Z</published>
    <updated>2019-05-29T15:36:21.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><p><code>Django</code>框架快速上手，是超多开箱即用的工具，快速开发的优先选择。它是由Python写成,采用了MTV的框架模式.即Model, View, Template组成。 说到底,其实Django内部就是对Socket连接的强大封装。</p><ul><li>模型（Model），即数据存取层（与数据库处理有关的程序）。 该层处理与数据相关的所有事务： 如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</li><li>模板(Template)，即表现层（各种html程序）。 该层处理与表现相关的决定： 如何在页面或其他类型文档中进行显示。</li><li>视图（View），即业务逻辑层（url的处理函数）。 该层包含存取模型及调取恰当模板的相关逻辑。 你可以把它看作模型与模板之间的桥梁。</li></ul><h3 id="Django文件结构"><a href="#Django文件结构" class="headerlink" title="Django文件结构"></a>Django文件结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">├── django/# 项目文件夹，对整个项目进行配置</div><div class="line">│   ├── setting.py # 项目配置文件</div><div class="line">│   ├── urls.py # url对应关系，对url的正则表达式分配相应视图</div><div class="line">│   ├── wsgi.py # 遵循WSIG规范, uwsgi + nginx</div><div class="line">│   └── manage.py# 管理Django 程序</div><div class="line">├── app/  # app， 应用程序文件夹</div><div class="line">│   ├── migrations/ # 数据库操作记录，相应表结构发生变化</div><div class="line">│   ├── admin.py # Django为我们提供的后台管理</div><div class="line">│   ├── apps.py # 配置当前APP</div><div class="line">│   ├── models.py # ORM,写指定的类通过命令可以创建数据库结构</div><div class="line">│   ├── tests.py # 单元测试</div><div class="line">│   └── views.py # 业务逻辑代码</div></pre></td></tr></table></figure><h3 id="Django原理"><a href="#Django原理" class="headerlink" title="Django原理"></a>Django原理</h3><h4 id="业务流程原理"><a href="#业务流程原理" class="headerlink" title="业务流程原理"></a>业务流程原理</h4><p>url请求—-&gt;访问路由系统(负责分发请求到相应视图函数)——&gt;视图函数(处理请求)——&gt;DataBase(数据库操作数据生成对应页面返回给用户)<br>这个过程中Django主要做了两件事：处理 Request和创建Response， 而它们对应的核心就是<code>urls分析</code>、<code>模板技术</code>和<code>ORM技术</code>。</p><!-- ![Django Flow Chart](./Python，Django/django process.png)具体步骤如下：- 当请求到来时，会首先经过中间件的Process_Request，如果Process_Request有return即当前url没有通过中间件，则程序直接跳转到最后一个Process_Response，然后逆序执行所有的Process_Response。- 然后程序会进入url，这时程序会检测用户有没有设置process_view,如果有，则接下来先执行process_view，如果process_view有return，则程序直接跳转到最后一个Process_Response，然后逆序执行所有的Process_Response。- 如果上一步没有process_view，程序会执行views文件中的函数- 执行完上一步，程序会检测有没有异常出现，如果有，则先执行中间件类对应的process_exception- 最后，程序会逆序执行所有的Process_Response。 --><p>具体步骤如下：</p><ol><li>用户通过浏览器请求一个页面</li><li>请求到达Request Middlewares，中间件对request做一些预处理或者直接response请求</li><li><code>URLConf</code>通过urls.py文件和请求的URL找到相应的View</li><li>View Middlewares被访问，它同样可以对request做一些处理或者直接返回response</li><li>调用View中的函数</li><li>View中的方法可以选择性的通过Models访问底层的数据  <!-- 7. 所有的Model-to-DB的交互都是通过manager完成的 8. 如果需要，Views可以使用一个特殊的Context 9. Context被传给Template用来生成页面:     a. Template使用Filters和Tags去渲染输出     b. 输出被返回到View     c. HTTPResponse被发送到Response Middlewares     d. 任何Response Middlewares都可以丰富response或者返回一个完全不同的response     e. Response返回到浏览器，呈现给用户 --></li></ol><h4 id="底层实现原理"><a href="#底层实现原理" class="headerlink" title="底层实现原理"></a>底层实现原理</h4><p>本质是Django就是一个Socket服务端,用户的浏览器其实就是一个Socket客户端.用户访问网站的过程就是服务端与客户端Socket通信的过程。</p><h5 id="WSGI协议"><a href="#WSGI协议" class="headerlink" title="WSGI协议"></a>WSGI协议</h5><p><strong>WSGI</strong>：全称是<code>Web Server Gateway Interface</code>，WSGI不是服务器，python模块，框架，API或者任何软件，只是一种<u>规范</u>，描述<code>web server</code>如何与<code>web application</code>通信的规范。server和application的规范在PEP 3333中有具体描述。要实现WSGI协议，必须同时实现<code>web server</code>和<code>web application</code>，当前运行在WSGI协议之上的web框架有Bottle, Flask, Django。<br><strong>uwsgi</strong>：与WSGI一样是一种通信协议，是uWSGI服务器的独占协议，用于定义传输信息的类型(type of information)，每一个uwsgi packet前4byte为传输信息类型的描述，与WSGI协议是两种东西，据说该协议是fcgi协议的10倍快。<br><strong>uWSGI</strong>：是一个web服务器，实现了WSGI协议、uwsgi协议、http协议等</p><p>WSGI协议主要包括server和application两部分：</p><ul><li><code>WSGI server</code>: 负责从客户端接收请求，将request转发给application，将application返回的response返回给客户端；</li><li><code>WSGI application</code>: 接收由server转发的request，处理请求，并将处理结果返回给server。application中可以包括多个栈式的中间件(middlewares)，这些中间件需要同时实现server与application，因此可以在WSGI服务器与WSGI应用之间起调节作用：对服务器来说，中间件扮演应用程序，对应用程序来说，中间件扮演服务器。</li></ul><p>WSGI协议其实是定义了一种server与application解耦的规范，即可以有多个实现WSGI server的服务器，也可以有多个实现WSGI application的框架，那么就可以选择任意的server和application组合实现自己的web应用。<br><img src="【面试笔记】Python，Django/wsgi.png" alt="wsgi"></p><h5 id="Django-WSGI-application"><a href="#Django-WSGI-application" class="headerlink" title="Django WSGI application"></a>Django WSGI application</h5><h3 id="配置服务器-Nginx-vs-Apache"><a href="#配置服务器-Nginx-vs-Apache" class="headerlink" title="配置服务器: Nginx vs Apache"></a>配置服务器: Nginx vs Apache</h3><p>Nginx相对Apache 的优点：</p><ul><li>轻量级，同样起web 服务，比apache占用更少的内存及资源</li><li>抗并发，Nginx处理请求是异步非阻塞的，而apache则是阻塞型的，在高并发下Nginx 能保持低资源低消耗高性能高度模块化的设计，编写模块相对简单</li><li>社区活跃，各种高性能模块出品迅速啊</li><li>Nginx配置简洁, Apache复杂</li></ul><p>Apache相对Nginx的优点：</p><ul><li>rewrite ，比nginx的rewrite强大</li><li>模块超多，基本想到的都可以找到</li><li>少bug ，nginx的bug相对较多超稳定</li></ul><p>Nginx的优势是处理静态请求，cpu内存使用率低，Apache适合处理动态请求，所以现在一般前端用Nginx作为反向代理抗住压力，apache作为后端处理动态请求。<br>最核心的区别在于apache是同步多进程模型，一个连接对应一个进程；nginx是异步的，多个连接（万级别）可以对应一个进程。<br>需要性能的web服务，用Nginx。如果不需要性能只求稳定，那就Apache。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.jianshu.com/p/278f575313e2" target="_blank" rel="external">Python篇-Django框架详解(一)</a></li><li><a href="https://yq.aliyun.com/articles/647654/" target="_blank" rel="external">Django框架–底层架构</a></li><li><a href="https://www.letiantian.me/2015-09-10-understand-python-wsgi/?spm=a2c4e.11153940.blogcont647654.20.5b004c51towiIv" target="_blank" rel="external">理解Python WSGI</a></li><li><a href="https://www.jianshu.com/p/679dee0a4193?spm=a2c4e.11153940.blogcont647654.19.5b004c51towiIv" target="_blank" rel="external">做python Web开发你要理解：WSGI &amp; uwsgi</a></li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Django&quot;&gt;&lt;a href=&quot;#Django&quot; class=&quot;headerlink&quot; title=&quot;Django&quot;&gt;&lt;/a&gt;Django&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Django&lt;/code&gt;框架快速上手，是超多开箱即用的工具，快速开发的优先选择。它是由Pyth
      
    
    </summary>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>【重读课本】操作系统概念</title>
    <link href="http://yoursite.com/2019/05/29/%E3%80%90%E9%87%8D%E8%AF%BB%E8%AF%BE%E6%9C%AC%E3%80%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2019/05/29/【重读课本】操作系统概念/</id>
    <published>2019-05-29T03:54:05.000Z</published>
    <updated>2019-05-29T13:19:00.590Z</updated>
    
    <content type="html"><![CDATA[<p>最近找工作的过程中，面试都问到了操作系统，而且是操作系统很基础的知识。然而，我都忘了… 换句话说，你忘了，就是在面试官心目中你不会。为了不再丢人，我决定好好重读课本，也算是巩固一下基础，努力做个好程序员。</p><p>因为面试过程中问的比较多的是进程和线程。那我就不按课本的顺序，先从线程开始。</p><h2 id="进程-amp"><a href="#进程-amp" class="headerlink" title="进程 &amp;"></a>进程 &amp;</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><strong>进程</strong>： <u>一个程序在一个数据集合上的一次运行</u>。所以一个程序在不同的数据集合上运行，乃至一个程序在同样的数据集合上的多次运行都是不同的进程。（如，浏览器打开多个页面）</li><li><p><strong>线程</strong>：线程是进程中的一个实体，是被系统独立调度和执行的基本单位。</p></li><li><p>作业：用户在一次解题或一个事务处理过程中要求计算机系统所做的工作的集合。它包括用户程序，所需要的数据以及控制命令等。作业是一系列有序的步骤组成的。</p></li><li>管程：管程实际上是定义了一个数据结构和在该数据结构上的能为并发进程所执行的一组操作，这组操作能同步进程和改变进程中的数据。</li></ul><h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3><ul><li>就绪(Ready): 当进程已分配到了除CPU以外的所有必要的资源，只要获得处理器就可以立即执行</li><li>执行(Running): 当进程获得了处理器，程序真正处理器上执行</li><li>阻塞(Blocked): 正在执行的进程，由于等待某个事件的发生而无法执行时，就放弃处理器而处于阻塞状态。引起阻塞的事件很多，如等待IO，申请缓冲区不能满足，等待信号等等</li></ul><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><h4 id="为什么需要线程"><a href="#为什么需要线程" class="headerlink" title="为什么需要线程"></a>为什么需要线程</h4><p>在完成一个事件如果要创建多个进程实现（如MP3播放器），多个进程又存在问题：</p><pre><code>- 进程之间通信和共享资源开销大- 维护进程的系统开销大：创建进程时，要分配资源和建立PCB；撤销进程时，回收资源和撤销PCB；进程切换时，保存当前进程的状态。</code></pre><h4 id="线程与进程的比较"><a href="#线程与进程的比较" class="headerlink" title="线程与进程的比较"></a>线程与进程的比较</h4><ul><li>进程时资源分配单位，线程时CPU的调度单位；</li><li>进程拥有一个完整的资源平台，线程只独享不可少的的资源如寄存器和栈。</li><li>进程间是独立的，这表现在内存空间和上下文环境上，线程是运行在进程空间内。</li><li>通常情况下，进程无法存储其他进程内的存储空间；而线程与它同属一进程的其他线程共享代码段，数据段和其他操作系统资源，它们共享同一内存空间；</li><li>同一进程中的两段代码不能同时执行，除非引入多进程</li><li>线程是属于进程的，当进程退出时该进程产生的所有线程都会被强制退出并清除。</li><li>进程间有IPC通信，线程没有</li><li><p>线程同样有就绪，阻塞和执行三种基本状态</p></li><li><p>线程能减少并发执行的时间和空间开销：</p><ul><li>线程的创建时间比进程短</li><li>线程的终止时间比进程短</li><li>同一进程内的线程切换时间比进程短</li><li>由于同一进程的各线程之间共享内存和文件资源，可以直接进行不需要通过内核的通信</li></ul></li></ul><h4 id="动态链接库-VS-静态链接库"><a href="#动态链接库-VS-静态链接库" class="headerlink" title="动态链接库 VS 静态链接库"></a>动态链接库 VS 静态链接库</h4><p>静态库包括了代码，地址符号等；而导入库（动态库）实际的执行代码位于动态库中。<br>静态库要参与编译，在生成执行文件工程中，要将静态库的所有指令全部接入执行文件中。所以，生成执行文件后，静态链接库.lib文件可以弃之不用。<br>动态链接库是作为共享函数的可执行文件。动态链接提供一个方法，使进程可以调用不属于它的可执行代码的函数。函数的执行代码位于.dll文件中，它包含了一个或多个已经被编译，链接并于使它们的进程的函数。</p><p>dll的优点：节省内存，减少交换操作，节省磁盘空间，更易于升级（不需要重链接和重编译），提供售后服务，提供拓展MFC库类的机制，支持多语言程序。<br>静态链接库可能比动态链接库快。</p><h3 id="进程之间的通信"><a href="#进程之间的通信" class="headerlink" title="进程之间的通信"></a>进程之间的通信</h3><p>进程之间的通信有：信号，管道，消息队列，共享内存</p><ul><li>信号：操作系统向应用程序发出信号，应用程序会：crash(直接退出)， ingore，catch(获取信号并处理，处理完后再回到原来的程序继续执行)。但是信号不能共享数据段。</li><li>管道：某个进程的输出是某个进程的输入，由操作系统决定</li><li>消息队列：<ul><li>直接通信：建立链接</li><li>间接通信：一个消息队列可以被多个进程所共享；共享消息队列的进程发送的消息中除了message本身外还有一个标志，这个标志可以指明该消息由哪个进程或哪类进程接受。每一个共享消息队列也有自己的标志，表明自己的身份</li></ul></li><li>共享内存：<br>  通常操作系统试图阻止一个进程访问另外一个进程的内存。共享内存需要两个或更多的进程取消这个限制， 它们通过在共享区域内读写交换信息。<br>  数据的形式或位置取决于这些进程而不受控于操作系统。<br>  进程还要保证它们不向同一区域同时写数据：生产者–消费者；如一个Web服务器生产（提供）HTML文件和图像，它们被请求资源的客户Web浏览器所消费(读取)。</li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>死锁产生条件：</p><pre><code>- 互斥条件- 请求与保持条件- 不剥夺条件- 循环等待条件</code></pre><p>占有一些资源，并循环等待</p><p>预防和解除：</p><pre><code>- 对进程发出的能过满足的资源请求进行动态检查，并根据检查结果决定是否分配资源- 防止进程在等待状态的情况下占有资源</code></pre><p>处理死锁基本方法:</p><pre><code>- 预防死锁(摒弃除1以外的条件)- 避免死锁(银行家算法) - 检测死锁(资源分配图)- 解除死锁    - 剥夺资源        - 撤销进程</code></pre><h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近找工作的过程中，面试都问到了操作系统，而且是操作系统很基础的知识。然而，我都忘了… 换句话说，你忘了，就是在面试官心目中你不会。为了不再丢人，我决定好好重读课本，也算是巩固一下基础，努力做个好程序员。&lt;/p&gt;
&lt;p&gt;因为面试过程中问的比较多的是进程和线程。那我就不按课本
      
    
    </summary>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Operating System" scheme="http://yoursite.com/tags/Operating-System/"/>
    
      <category term="重读" scheme="http://yoursite.com/tags/%E9%87%8D%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用笔记</title>
    <link href="http://yoursite.com/2019/05/29/Hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/29/Hexo使用笔记/</id>
    <published>2019-05-28T16:40:41.000Z</published>
    <updated>2019-05-28T17:14:36.562Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo的官方文档如下：</p><blockquote><p><a href="https://hexo.io/docs/" target="_blank" rel="external">https://hexo.io/docs/</a><br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">https://hexo.io/zh-cn/docs/</a></p></blockquote><p>为了方便，我把一些常用的指令记录下来。</p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul><li>new: 新建一篇文章</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。<br>如果没有设置 layout 的话，默认使用 <code>_config.yml</code> 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><ul><li>generate: 生成静态文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>选项: </p><pre><code>- -d, --deploy:    文件生成后立即部署网站- -w, --watch:    监视文件变动</code></pre><p>该指令可以简写为 <code>hexo g</code></p><ul><li>publish: 发表草稿</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure><ul><li>server: 启动本地服务器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><ul><li>deploy: 部署</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>该命令可以简写为：<code>hexo d</code></p><ul><li>clean: 清除缓存文件 (db.json) 和已生成的静态文件 (public)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div></pre></td></tr></table></figure><p>在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，那就可能需要运行该命令。</p><ul><li>list: 列出网站资料</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo list &lt;type&gt;</div></pre></td></tr></table></figure><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量。<br>预定义的参数有：<code>layout</code>, <code>title</code>, <code>date</code>, <code>updated</code>, <code>comments</code>, <code>tags</code>, <code>categories</code>, <code>permalink</code>.</p><p>并列分类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">categories:</div><div class="line">- [Linux]</div><div class="line">- [Tools]</div></pre></td></tr></table></figure></p><p>并列+子分类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">categories:</div><div class="line">- [Linux, Hexo]</div><div class="line">- [Tools, PHP]</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo的官方文档如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/docs/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;htt
      
    
    </summary>
    
      <category term="Technique" scheme="http://yoursite.com/categories/Technique/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/04/hello-world/"/>
    <id>http://yoursite.com/2017/10/04/hello-world/</id>
    <published>2017-10-04T05:54:22.000Z</published>
    <updated>2017-10-05T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><p>testst</p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
